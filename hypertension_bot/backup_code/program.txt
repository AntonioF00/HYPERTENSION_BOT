2023-03-14

//else if (_data.MessageText.Any(char.IsDigit))
//{
//    int num1, num2, num3;

//    bool success = int.TryParse(new string(_data.MessageText.Replace("/", "-").Replace(",", "-")
//                                .SkipWhile(x => !char.IsDigit(x))
//                                .TakeWhile(x => char.IsDigit(x))
//                                .ToArray()), out num1);
//    if (num1 != 0 && success)
//    {
//        var mess = _data.MessageText.Replace(num1.ToString(), "");

//        success = int.TryParse(new string(mess
//                                .SkipWhile(x => !char.IsDigit(x))
//                                .TakeWhile(x => char.IsDigit(x))
//                                .ToArray()), out num2);
//        if (num2 != 0 && success)
//        {
//            _unknown = true;
//            _data.Done = true;

//            _data.Sistolic  = (num1 > num2) ? num1 : num2;
//            _data.Diastolic = (num1 > num2) ? num2 : num1;

//            mess = (_data.Diastolic >= 100) ? mess = mess.Remove(0, 4) : mess = "x" + mess.Substring(3);

//            success = int.TryParse(new string($"{mess}"
//                                   .SkipWhile(x => !char.IsDigit(x))
//                                   .TakeWhile(x => char.IsDigit(x))
//                                   .ToArray()), out num3);
//            _data.HeartRate = num3;

//            if (_data.Sistolic <= Setting.Istance.Configuration.ValoreMaxSi && _data.Sistolic >= Setting.Istance.Configuration.ValoreMinSi &&
//                _data.Diastolic <= Setting.Istance.Configuration.ValoreMaxDi && _data.Diastolic >= Setting.Istance.Configuration.ValoreMinDi)
//            {
//                mess = success ? $"Sistolica : {_data.Sistolic} mmHg\nDiastolica : {_data.Diastolic} mmHg\nFrequenza cardiaca : {_data.HeartRate} bpm\nSono corretti?" :
//                                 $"Sistolica : {_data.Sistolic} mmHg\nDiastolica : {_data.Diastolic} mmHg\nSono corretti?";
//            }
//            else
//            {
//                mess = $"{_data.FirstName}!\n{_data.MeasuresAccepted.Message[_data.Random.Next(3)]}";
//            }

//            _data.SentMessage = await botClient.SendTextMessageAsync(chatId: _data.ChatId, text: mess, cancellationToken: cancellationToken);
//        }
//    }
//}


//else if (_data.MessageText.Any(char.IsDigit))
//{
//    var messageText = _data.MessageText.Replace("/", "-").Replace(",", "-");
//    var digits = new string(messageText.Where(char.IsDigit).ToArray());

//    if (int.TryParse(digits, out var num1))
//    {
//        var mess = messageText.Replace(num1.ToString(), "");

//        if (int.TryParse(new string(mess.Where(char.IsDigit).ToArray()), out var num2))
//        {
//            _unknown = true;
//            _data.Done = true;

//            _data.Sistolic = Math.Max(num1, num2);
//            _data.Diastolic = Math.Min(num1, num2);

//            mess = (_data.Diastolic >= 100) ? mess.Remove(0, 4) : "x" + mess.Substring(3);

//            if (int.TryParse(new string(mess.Where(char.IsDigit).ToArray()), out var num3))
//            {
//                _data.HeartRate = num3;
//            }

//            if (_data.Sistolic <= Setting.Istance.Configuration.ValoreMaxSi && _data.Sistolic >= Setting.Istance.Configuration.ValoreMinSi &&
//                _data.Diastolic <= Setting.Istance.Configuration.ValoreMaxDi && _data.Diastolic >= Setting.Istance.Configuration.ValoreMinDi)
//            {
//                var text = $"Sistolica : {_data.Sistolic} mmHg\nDiastolica : {_data.Diastolic} mmHg\n";
//                text += (_data.HeartRate > 0) ? $"Frequenza cardiaca : {_data.HeartRate} bpm\n" : "";
//                text += "Sono corretti?";
//                _data.SentMessage = await botClient.SendTextMessageAsync(chatId: _data.ChatId, text: text, cancellationToken: cancellationToken);
//            }
//            else
//            {
//                var text = $"{_data.FirstName}!\n{_data.MeasuresAccepted.Message[_data.Random.Next(3)]}";
//                _data.SentMessage = await botClient.SendTextMessageAsync(chatId: _data.ChatId, text: text, cancellationToken: cancellationToken);
//            }
//        }
//    }
//}

15/03/2023 metodo per scomporre i numeri in una stringa 
bool success = int.TryParse(new string(_data.MessageText.Replace("/", "-").Replace(",", "-")
                            .SkipWhile(x => !char.IsDigit(x))
                            .TakeWhile(x => char.IsDigit(x))
                            .ToArray()), out num1);

if (_data.Sistolic <= Setting.Istance.Configuration.ValoreMaxSi && _data.Sistolic >= Setting.Istance.Configuration.ValoreMinSi &&
    _data.Diastolic <= Setting.Istance.Configuration.ValoreMaxDi && _data.Diastolic >= Setting.Istance.Configuration.ValoreMinDi)
{
    mess = success ? $"Sistolica : {_data.Sistolic} mmHg\nDiastolica : {_data.Diastolic} mmHg\nFrequenza cardiaca : {_data.HeartRate} bpm\nSono corretti?" :
                        $"Sistolica : {_data.Sistolic} mmHg\nDiastolica : {_data.Diastolic} mmHg\nSono corretti?";
}
else
{
    mess = $"{_data.FirstName}!\n{_data.MeasuresAccepted.Message[_data.Random.Next(3)]}";
}

15-03-2023
Creata classe Worker ed eliminato da program le seguenti porzioni di codice:
    _data.LastDataInsert = _dbController.LastInsert(_data.Id);
    var _firstAlert = _dbController.GetFirstAlert(_data.Id);

    
    if (_data.LastDataInsert != "0" && !_firstAlert)
    {
        var n = 0;
        n = (int.Parse(_data.LastDataInsert) > int.Parse(System.DateTime.Today.Day.ToString()))
                                                                                                ? int.Parse(_data.LastDataInsert) - int.Parse(System.DateTime.Today.Day.ToString())
                                                                                                : int.Parse(System.DateTime.Today.Day.ToString()) - int.Parse(_data.LastDataInsert);
        _dbController.UpdateFirstAlert(_data.Id, false);

        if (n > 2)
        {
            _dbController.UpdateFirstAlert(_data.Id, true);
            _data.SentMessage = await botClient.SendTextMessageAsync(chatId: _data.ChatId,
                                                                        text: $"{_data.FirstName} è da un po' che non prendiamo i valori!\nOggi potrebbe essere un buon giorno per farlo!",
                                                                        cancellationToken: cancellationToken);
        }
    }

20-03-2023
else if ((_data.MessageText.Contains("medi") || 
                     _data.MessageText.Contains("mensile") || 
                     _data.MessageText.Contains("giornaliera") ||
                     _data.MessageText.Contains("settimanale")) && _data.MessageText.Contains("medi"))
            {
                _unknown = true;
                string responseText;
                if (_data.MessageText.Contains("mese") || _data.MessageText.Contains("mensile"))
                    responseText = _data.AverageMessage.calculateMonthAVG(_data.Id, _data.FirstName);
                else if (_data.MessageText.Contains("settima"))
                    responseText = _data.AverageMessage.calculateWeekAVG(_data.Id, _data.FirstName);
                else if (_data.MessageText.Contains("giorn") || _data.MessageText.Contains("oggi"))
                    responseText = _data.AverageMessage.calculateDayAVG(_data.Id, _data.FirstName);
                else
                    responseText = $"{_data.FirstName} specifica il tipo di media che vuoi visualizzare!\nMedia giornaliera / Media mensile / Media settimanale!";

                _data.SentMessage = await botClient.SendTextMessageAsync(chatId: _data.ChatId,
                                                                         text: responseText,
                                                                         cancellationToken: cancellationToken);
            }
            else if ((_data.MessageText.Contains("medi") ||
                     _data.MessageText.Contains("mens") ||
                     _data.MessageText.Contains("giorn") ||
                     _data.MessageText.Contains("settima")) && _data.ListMessage.Messages.Any(_data.MessageText.Contains))
            {
                _unknown = true;
                string responseText;
                if (_data.MessageText.Contains("mese") || _data.MessageText.Contains("mensile"))
                    responseText = _data.ListMessage.MonthList(_data.Id, _data.FirstName);
                else if (_data.MessageText.Contains("settima"))
                    responseText = _data.ListMessage.WeekList(_data.Id, _data.FirstName);
                else if (_data.MessageText.Contains("giorn") || _data.MessageText.Contains("oggi"))
                    responseText = _data.ListMessage.DayList(_data.Id, _data.FirstName);
                else
                    responseText = $"{_data.FirstName} specifica quale elenco vuoi visualizzare!\nElenco mensile / Elenco settimanale / Elenco giornaliero!";

                _data.SentMessage = await botClient.SendTextMessageAsync(chatId: _data.ChatId,
                                                                         text: responseText,
                                                                         cancellationToken: cancellationToken);
            }