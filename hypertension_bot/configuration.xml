<?xml version="1.0" encoding="utf-8" ?>
<Configuration>

	<!--DB connection-->
	<ConnectionString>Server=localhost;Database=hypertension_db;Port=5432;User Id=postgres;password=password;</ConnectionString>
	<ConnectionType>POSTGRESQL</ConnectionType>

	<!--Bot settings-->
	<BotToken>5505039837:AAGceHkTc7OVOn4AmwZ5x_Ol_srrDNkf3rs</BotToken>
	<WitToken>TOL255PV5YN7NCIULDK7JQWV5MG72WP4</WitToken>
	<GPT3Api>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</GPT3Api>

	<!-- Querys-->
	<InsertMeasures>
	INSERT INTO users."Measurement"(systolic, diastolic, datetime,"heartRate", "User_idUser")
	VALUES (@sistolic, @diastolic, NOW(),@heartRate,(SELECT "idUser" FROM users."User" WHERE "idTelegram" = @id));
	</InsertMeasures>

	<!-- Query per inserire un nuovo utente, qualora fosse già presente farà l'update-->
	<InsertUser>
	INSERT INTO users."User"("idTelegram")
	VALUES (@id)
	ON CONFLICT ("idTelegram") DO UPDATE
	SET  "idTelegram" = @id;
		
	INSERT INTO users."Alert"(
	"firstAlertGiven", "secondAlertGiven", "thirdAlertGiven", "User_idUser")
	VALUES (false, false, false, (SELECT "idUser" FROM users."User" WHERE "idTelegram" = @id)::integer)
	ON CONFLICT DO NOTHING;
	</InsertUser>

	<!-- Query per controllare l'ultima data d'inserimento dell'utente -->
	<LastInsert>
	SELECT
		CASE
			WHEN extract(day from datetime::timestamp::date)::text IS NULL THEN 0::text
			ELSE extract(day from datetime::timestamp::date)::text
		END
	FROM users."Measurement"
	WHERE "User_idUser" = (SELECT "idUser" FROM users."User" WHERE "idTelegram" = @id)::integer
	group by datetime
	order by MAX("idMeasurement") desc
	LIMIT 1
	</LastInsert>

	<GetFirstAlert>
	SELECT "firstAlertGiven"
	FROM users."Alert"
	WHERE "User_idUser" = (SELECT "idUser" FROM users."User" WHERE "idTelegram" = @id)::integer;
	</GetFirstAlert>

	<UpdateFirstAlert>
	UPDATE users."Alert"
	SET "firstAlertGiven" = @val::boolean
	WHERE "User_idUser" = (SELECT "idUser" FROM users."User" WHERE "idTelegram" = @id)::integer;
	</UpdateFirstAlert>
	
	<!-- Query per calcolare la media mensile -->
	<CalculateMonthAVG>
	SELECT AVG(systolic)::int as systolic, AVG(diastolic)::int as diastolic, AVG("heartRate")::int as heartRate
	FROM users."Measurement"
	WHERE datetime::timestamp(0) BETWEEN (now()::timestamp(0) - '30 days'::interval)::timestamp(0)
			and now()::timestamp(0)
			and "User_idUser" = (SELECT "idUser" FROM users."User" WHERE "idTelegram" = @id)::integer
	GROUP BY "User_idUser"
	</CalculateMonthAVG>
	
	<!-- Query per calcolare la media settimanale -->
	<CalculateWeekAVG>
	SELECT AVG(systolic)::int as systolic, AVG(diastolic)::int as diastolic, AVG("heartRate")::int as heartRate
	FROM users."Measurement"
	WHERE datetime::timestamp(0) BETWEEN (now()::timestamp(0) - '7 days'::interval)::timestamp(0)
			and now()::timestamp(0)
			and "User_idUser" = (SELECT "idUser" FROM users."User" WHERE "idTelegram" = @id)::integer
	GROUP BY "User_idUser"
	</CalculateWeekAVG>
	
	<!-- Query per calcolare la media giornaliera -->
	<CalculateDayAVG>
	SELECT AVG(systolic)::int as systolic, AVG(diastolic)::int as diastolic, AVG("heartRate")::int as heartRate
	FROM users."Measurement"
	WHERE datetime::timestamp(0) BETWEEN (now()::timestamp(0) - '1 days'::interval)::timestamp(0)
			and now()::timestamp(0)
			and "User_idUser" = (SELECT "idUser" FROM users."User" WHERE "idTelegram" = @id)
	GROUP BY "User_idUser"
	</CalculateDayAVG>
	
	<!-- Query per selezionare le misurazione d'un utente comprese tra now() e due giorni fa -->
	<MeasurementList>
	SELECT "idMeasurement", systolic, diastolic, "heartRate", datetime
	FROM users."Measurement"
	WHERE "User_idUser" = (SELECT "idUser" FROM users."User" WHERE "idTelegram" = @id)
		  and datetime::timestamp(0) BETWEEN (now()::timestamp(0) - '2 days'::interval)::timestamp(0)
			and now()::timestamp(0)
	</MeasurementList>

	<!-- Query per selezionare tutte le misurazione d'un utente -->
	<MeasurementAllList>
		SELECT "idMeasurement", systolic, diastolic, "heartRate", datetime
		FROM users."Measurement"
		WHERE "User_idUser" = (SELECT "idUser" FROM users."User" WHERE "idTelegram" = @id)
	</MeasurementAllList>
	
	<!-- Query per selezionare le misurazioni giornaliere d'un utente -->
	<MeasurementDayList>
	SELECT "idMeasurement", systolic, diastolic, "heartRate", datetime
	FROM users."Measurement"
	WHERE "User_idUser" = (SELECT "idUser" FROM users."User" WHERE "idTelegram" = @id)
		  and datetime::timestamp(0) BETWEEN (now()::timestamp(0) - '1 days'::interval)::timestamp(0)
			and now()::timestamp(0)
	</MeasurementDayList>
	
	<!-- Query per selezionare le misurazioni settimanali d'un utente -->
	<MeasurementWeekList>
	SELECT "idMeasurement", systolic, diastolic, "heartRate", datetime
	FROM users."Measurement"
	WHERE "User_idUser" = (SELECT "idUser" FROM users."User" WHERE "idTelegram" = @id)
		  and datetime::timestamp(0) BETWEEN (now()::timestamp(0) - '7 days'::interval)::timestamp(0)
			and now()::timestamp(0)
	</MeasurementWeekList>
	
	<!-- Query per selezionare le misurazioni mensili d'un utente -->
	<MeasurementMonthList>
	SELECT "idMeasurement", systolic, diastolic, "heartRate", datetime
	FROM users."Measurement"
	WHERE "User_idUser" = (SELECT "idUser" FROM users."User" WHERE "idTelegram" = @id)
		  and datetime::timestamp(0) BETWEEN (now()::timestamp(0) - '30 days'::interval)::timestamp(0)
			and now()::timestamp(0)
	</MeasurementMonthList>

	<!-- Query per eliminare una misurazione -->
	<DeleteMeasurement>
	SELECT true 
	FROM users."Measurement"
	WHERE "User_idUser" = (SELECT "idUser" FROM users."User" WHERE "idTelegram" = @id) AND "idMeasurement" = @idMisurazione;
	
	DELETE FROM users."Measurement"
	WHERE "User_idUser" = (SELECT "idUser" FROM users."User" WHERE "idTelegram" = @id) AND "idMeasurement" = @idMisurazione;
	</DeleteMeasurement>

	<!-- Campi -->
	<!--Valore massimo consentito per la sistolica, sopra questo valore il bot invierà un messaggio di allerta all'utente -->
	<ValoreMaxSi>250</ValoreMaxSi>
	
	<!--Valore massimo consentito per la diastolica, sopra questo valore il bot invierà un messaggio di allerta all'utente -->
	<ValoreMaxDi>140</ValoreMaxDi>
	
	<!--Valore minimo consentito per la sistolica, sopra questo valore il bot invierà un messaggio di allerta all'utente -->
	<ValoreMinSi>50</ValoreMinSi>
	
	<!--Valore minimo consentito per la diastolica, sopra questo valore il bot invierà un messaggio di allerta all'utente -->
	<ValoreMinDi>40</ValoreMinDi>

	<!--Smtp configuration-->
	<Smtp>10.32.11.141</Smtp>
	<Username>email</Username>
	<NickName>nickname</NickName>
	<Pwd>emailpwd</Pwd>
	<Recipient>destinatario email</Recipient>
	<RecipientUsername>destinatario nickname</RecipientUsername>
	<Subject>oggetto</Subject>
	<Body></Body>
	
</Configuration>